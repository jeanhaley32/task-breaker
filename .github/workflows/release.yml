name: Release

on:
  push:
    tags:
      - 'v*'

env:
  GO_VERSION: '1.21'

jobs:
  test:
    name: Test Before Release
    runs-on: ubuntu-latest

    steps:
    - name: Check out code
      uses: actions/checkout@v4

    - name: Set up Go
      uses: actions/setup-go@v4
      with:
        go-version: ${{ env.GO_VERSION }}

    - name: Run all tests
      run: |
        go test -v -race -short ./...

    - name: Run integration tests
      run: |
        go test -v -timeout=10m -run "TestIntegration" -short ./...

  build:
    name: Build Release Binaries
    runs-on: ubuntu-latest
    needs: test

    strategy:
      matrix:
        goos: [linux, windows, darwin]
        goarch: [amd64, arm64]
        exclude:
          - goos: windows
            goarch: arm64

    steps:
    - name: Check out code
      uses: actions/checkout@v4

    - name: Set up Go
      uses: actions/setup-go@v4
      with:
        go-version: ${{ env.GO_VERSION }}

    - name: Get version
      id: version
      run: echo "VERSION=${GITHUB_REF#refs/tags/}" >> $GITHUB_OUTPUT

    - name: Build binary
      env:
        GOOS: ${{ matrix.goos }}
        GOARCH: ${{ matrix.goarch }}
        CGO_ENABLED: 0
      run: |
        BINARY_NAME="task-breaker"
        if [ "$GOOS" = "windows" ]; then
          BINARY_NAME="${BINARY_NAME}.exe"
        fi

        go build -v -ldflags="-s -w -X main.version=${{ steps.version.outputs.VERSION }}" \
          -o "${BINARY_NAME}" ./cmd/chat.go

        # Create archive
        ARCHIVE_NAME="task-breaker-${{ steps.version.outputs.VERSION }}-${GOOS}-${GOARCH}"
        if [ "$GOOS" = "windows" ]; then
          zip "${ARCHIVE_NAME}.zip" "${BINARY_NAME}" README.md LICENSE
        else
          tar -czf "${ARCHIVE_NAME}.tar.gz" "${BINARY_NAME}" README.md LICENSE
        fi

    - name: Upload build artifacts
      uses: actions/upload-artifact@v3
      with:
        name: release-binaries
        path: |
          *.tar.gz
          *.zip

  release:
    name: Create Release
    runs-on: ubuntu-latest
    needs: build
    permissions:
      contents: write

    steps:
    - name: Check out code
      uses: actions/checkout@v4

    - name: Download build artifacts
      uses: actions/download-artifact@v3
      with:
        name: release-binaries

    - name: Get version
      id: version
      run: echo "VERSION=${GITHUB_REF#refs/tags/}" >> $GITHUB_OUTPUT

    - name: Generate changelog
      id: changelog
      run: |
        # Extract changelog between current and previous tag
        PREVIOUS_TAG=$(git describe --tags --abbrev=0 HEAD~1 2>/dev/null || echo "")
        if [ -n "$PREVIOUS_TAG" ]; then
          echo "CHANGELOG<<EOF" >> $GITHUB_OUTPUT
          git log --pretty=format:"- %s" $PREVIOUS_TAG..HEAD >> $GITHUB_OUTPUT
          echo "" >> $GITHUB_OUTPUT
          echo "EOF" >> $GITHUB_OUTPUT
        else
          echo "CHANGELOG=Initial release" >> $GITHUB_OUTPUT
        fi

    - name: Create Release
      uses: softprops/action-gh-release@v1
      with:
        tag_name: ${{ steps.version.outputs.VERSION }}
        name: Release ${{ steps.version.outputs.VERSION }}
        body: |
          ## Changes in ${{ steps.version.outputs.VERSION }}

          ${{ steps.changelog.outputs.CHANGELOG }}

          ## Installation

          ### Binary Installation
          Download the appropriate binary for your platform from the assets below.

          ### Go Install
          ```bash
          go install github.com/jeanhaley32/task-breaker/cmd/chat@${{ steps.version.outputs.VERSION }}
          ```

          ### Docker
          ```bash
          docker run -it ghcr.io/jeanhaley32/task-breaker:${{ steps.version.outputs.VERSION }}
          ```

          ## Usage

          ```bash
          # Set your API key
          export OPENAI_API_KEY=your_key_here

          # Start chatting
          ./task-breaker
          ```

          For more information, see the [README](https://github.com/jeanhaley32/task-breaker#readme).
        files: |
          *.tar.gz
          *.zip
        draft: false
        prerelease: false
        generate_release_notes: false

  docker-release:
    name: Build and Push Docker Image
    runs-on: ubuntu-latest
    needs: test
    permissions:
      contents: read
      packages: write

    steps:
    - name: Check out code
      uses: actions/checkout@v4

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: Login to GitHub Container Registry
      uses: docker/login-action@v3
      with:
        registry: ghcr.io
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}

    - name: Extract metadata
      id: meta
      uses: docker/metadata-action@v5
      with:
        images: ghcr.io/${{ github.repository }}
        tags: |
          type=ref,event=tag
          type=semver,pattern={{version}}
          type=semver,pattern={{major}}.{{minor}}
          type=semver,pattern={{major}}

    - name: Build and push Docker image
      uses: docker/build-push-action@v5
      with:
        context: .
        file: ./Dockerfile
        push: true
        tags: ${{ steps.meta.outputs.tags }}
        labels: ${{ steps.meta.outputs.labels }}
        cache-from: type=gha
        cache-to: type=gha,mode=max